name: Release

on:
  push:
    branches: [main]

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, windows-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Set up Python for node-gyp
        if: runner.os == 'macOS'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install setuptools for node-gyp
        if: runner.os == 'macOS'
        run: pip install setuptools

      - name: Install build tools
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y build-essential cmake libpulse-dev libx11-dev
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          fi

      - name: Install dependencies
        run: |
          corepack enable
          yarn install --frozen-lockfile

      # Build native modules
      - name: Build native modules
        run: |
          npx cmake-js compile --runtime=electron --runtime-version=37.2.0 --arch=${{ matrix.os == 'macos-14' && 'arm64' || 'x64' }}
          yarn electron-builder install-app-deps

      # Build platform-specific artefacts
      - name: Build application
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            yarn package --mac --publish never
            # Ad-hoc sign the app to prevent "damaged" warnings
            find release/build/mac -name "*.app" -exec codesign --force --deep --sign - {} \;
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            yarn package --win --publish never
          else
            yarn package --linux --publish never
          fi

      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: art-${{ runner.os }}
          path: release/build/**

  release:
    needs: build-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Read version
        id: version
        run: echo "::set-output name=tag::v$(jq -r .version < package.json)"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: AudioMid ${{ steps.version.outputs.tag }}
          body: |
            Automated build for commit ${{ github.sha }}.

            Windows and Linux builds are generated automatically but remain untested.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attach artefacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          files: |
            dist/**/*.dmg
            dist/**/*.exe
            dist/**/*.AppImage
            dist/**/*.deb
            dist/**/*.rpm
            dist/**/*.zip
            dist/**/latest*.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
