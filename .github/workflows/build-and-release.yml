name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build-mac:
    name: Build macOS
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          corepack enable
          yarn install --frozen-lockfile

      - name: Build (macOS)
        run: yarn package --mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macOS-artifacts
          path: |
            release/build/*.dmg
            release/build/*mac*.zip

  build-win:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          corepack enable
          yarn install --frozen-lockfile

      - name: Build (Windows)
        run: yarn package --win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: release/build/*.exe

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          corepack enable
          yarn install --frozen-lockfile

      - name: Build (Linux)
        run: yarn package --linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            release/build/*.AppImage
            release/build/*.deb

  release:
    name: Create GitHub Release
    needs: [build-mac, build-win, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Read version from package.json
        id: get_version
        run: |
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: 'v${{ steps.get_version.outputs.version }}'
          name: 'AudioMind v${{ steps.get_version.outputs.version }}'
          body: |
            Automated build from commit ${{ github.sha }}.

            **Note:** Windows builds are currently untested. Please report any issues.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
